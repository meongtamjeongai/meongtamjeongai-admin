# 워크플로우의 UI 표시 이름
name: "🎨 [Admin] Build, Push to ECR & Deploy via SSM"

# 동적 실행 이름 (버전 정보 추가)
run-name: "🎨 Admin v${{ github.event.inputs.image_version }} | ${{ github.event.inputs.run_description }} | by @${{ github.actor }}"

on:
  workflow_dispatch:
    inputs:
      git_ref:
        description: "빌드할 Git 참조 (브랜치, 태그 또는 커밋 SHA)"
        required: true
        default: "main"
      # ⭐️ 1. 이미지 버전을 입력받는 필드 추가
      image_version:
        description: "이미지 버전 태그 (예: 1.0.0, 1.0.1-hotfix)"
        required: true
        default: "0.0.1" # 기본 버전
      run_description:
        description: "💬 이 배포의 목적을 입력하세요 (예: 사용자 UI 개선)"
        required: true
        default: "Regular Manual Deployment"

# ... (permissions, env 등은 기존과 동일)
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ADMIN_ECR_REPOSITORY }}
  CONTAINER_NAME: admin-app-container
  HOST_PORT: ${{ secrets.ADMIN_HOST_PORT }}
  CONTAINER_PORT: ${{ secrets.ADMIN_CONTAINER_PORT }}
  ALB_PRIVATE_IP: ${{ secrets.ALB_PRIVATE_IP }}
  FASTAPI_BASE_URL: ${{ secrets.FASTAPI_BASE_URL }}
  SIGNUP_MODE_VALUE: ${{ secrets.ADMIN_SECRET_SIGNUP_MODE }}

jobs:
  print_run_info:
    name: 0. Print Run Information
    runs-on: ubuntu-latest
    steps:
      - name: Display run parameters
        run: |
          # Summary에 버전 정보 추가
          echo "### 🎨 Admin App Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| **Git Ref** | \`${{ github.event.inputs.git_ref }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image Version** | \`${{ github.event.inputs.image_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Description** | ${{ github.event.inputs.run_description }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | `@${{ github.actor }}` |" >> $GITHUB_STEP_SUMMARY

  build-and-deploy:
    name: Build, Push to ECR, and Deploy to EC2
    runs-on: ubuntu-latest
    needs: print_run_info

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.git_ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ⭐️ 2. Docker 이미지 빌드 및 ECR에 두 개의 태그로 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_VERSION: ${{ github.event.inputs.image_version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 'tags' 옵션에 여러 줄로 태그를 지정하면, 동일한 이미지에 여러 태그가 적용됩니다.
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_VERSION }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      # ⭐️ 3. SSM Send-Command 스크립트 수정
      - name: Deploy to EC2 instance via SSM
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_VERSION: ${{ github.event.inputs.image_version }} # 입력받은 버전을 사용
        run: |
          set -e

          # 변수 유효성 검사
          if [ -z "$HOST_PORT" ] || [ -z "$CONTAINER_PORT" ] || [ -z "$ALB_PRIVATE_IP" ] || [ -z "$FASTAPI_BASE_URL" ]; then
            echo "::error:: One or more required secrets are not set."
            exit 1
          fi

          COMMAND_SCRIPT=$(cat <<'EOF'
          set -e

          # ECR 로그인
          echo ">>> Logging into ECR from EC2 instance..."
          aws ecr get-login-password --region __AWS_REGION__ | sudo docker login --username AWS --password-stdin __ECR_REGISTRY__

          # 새 이미지 다운로드 (latest가 아닌, 명시적 버전 태그 사용)
          echo ">>> Pulling new image: __FULL_IMAGE_URI__"
          sudo docker pull __FULL_IMAGE_URI__

          # 기존 컨테이너 중지 및 제거
          echo ">>> Stopping and removing old container if it exists..."
          if [ $(sudo docker ps -q -f name=__CONTAINER_NAME__) ]; then sudo docker stop __CONTAINER_NAME__; fi
          if [ $(sudo docker ps -aq -f name=__CONTAINER_NAME__) ]; then sudo docker rm __CONTAINER_NAME__; fi

          # 새 컨테이너 실행 (명시적 버전 태그 사용)
          echo ">>> Starting new container..."
          sudo docker run -d \
            --name __CONTAINER_NAME__ \
            -p __HOST_PORT__:__CONTAINER_PORT__ \
            --restart always \
            --add-host=meong.shop:__ALB_PRIVATE_IP__ \
            --add-host=admin.meong.shop:__ALB_PRIVATE_IP__ \
            -e FASTAPI_API_BASE_URL="__FASTAPI_BASE_URL__" \
            -e SECRET_SIGNUP_MODE="__SIGNUP_MODE_VALUE__" \
            __FULL_IMAGE_URI__

          # 불필요한 Docker 이미지 정리
          echo ">>> Pruning old docker images..."
          sudo docker image prune -af

          echo "✅ Deployment script finished successfully on EC2."
          EOF
          )

          # 플레이스홀더 치환 (IMAGE_TAG 대신 IMAGE_VERSION 사용)
          FULL_IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_VERSION}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__AWS_REGION__/${AWS_REGION}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__ECR_REGISTRY__/${ECR_REGISTRY}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__FULL_IMAGE_URI__/${FULL_IMAGE_URI}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__CONTAINER_NAME__/${CONTAINER_NAME}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__HOST_PORT__/${HOST_PORT}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__CONTAINER_PORT__/${CONTAINER_PORT}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__ALB_PRIVATE_IP__/${ALB_PRIVATE_IP}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__FASTAPI_BASE_URL__/${FASTAPI_BASE_URL}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__SIGNUP_MODE_VALUE__/${SIGNUP_MODE_VALUE}}"

          # SSM 파라미터 생성 및 전송
          SSM_PARAMETERS=$(jq -n --arg script "$COMMAND_SCRIPT" '{ "commands": ($script | split("\n")) }')

          echo ">>> Sending deployment command to EC2 instance via SSM..."
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy image version ${{ env.IMAGE_VERSION }} via GitHub Actions" \
            --parameters "$SSM_PARAMETERS"
