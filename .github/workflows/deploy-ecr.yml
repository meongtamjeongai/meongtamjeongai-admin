name: CI/CD to AWS ECR and Deploy to EC2

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  CONTAINER_NAME: my-app-container
  # 🎯 추가: 포트 관련 Secrets를 환경 변수로 설정
  HOST_PORT: ${{ secrets.HOST_PORT }}
  CONTAINER_PORT: ${{ secrets.CONTAINER_PORT }}

jobs:
  build-and-deploy:
    name: Build, Push to ECR, and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃 (이전과 동일)
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2. AWS 자격 증명 설정 (OIDC, 이전과 동일)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Amazon ECR 로그인 (이전과 동일)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Docker 이미지 빌드, 태그 지정 및 ECR에 푸시 (이전과 동일)
      - name: Build, tag, and push image to Amazon ECR
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # 5. SSM Send-Command를 통해 배포 스크립트 실행 (수정된 부분)
      - name: Deploy to EC2 instance via SSM
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          
          # 변수 유효성 검사
          if [ -z "$HOST_PORT" ] || [ -z "$CONTAINER_PORT" ]; then
            echo "::error:: HOST_PORT or CONTAINER_PORT secret is not set."
            exit 1
          fi
          
          # 실행할 쉘 스크립트 내용을 변수에 저장 (템플릿 역할)
          # 변수들은 __PLACEHOLDER__ 형태로 두고 나중에 치환
          COMMAND_SCRIPT=$(cat <<'EOF'
          set -e
          echo "Logging into ECR from EC2 instance..."
          aws ecr get-login-password --region __AWS_REGION__ | sudo docker login --username AWS --password-stdin __ECR_REGISTRY__
          echo "Pulling new image: __FULL_IMAGE_URI__"
          sudo docker pull __FULL_IMAGE_URI__
          echo "Stopping and removing old container..."
          if [ $(sudo docker ps -q -f name=__CONTAINER_NAME__) ]; then sudo docker stop __CONTAINER_NAME__; fi
          if [ $(sudo docker ps -aq -f name=__CONTAINER_NAME__) ]; then sudo docker rm __CONTAINER_NAME__; fi
          echo "Starting new container on host port __HOST_PORT__ mapping to container port __CONTAINER_PORT__..."
          sudo docker run -d --name __CONTAINER_NAME__ -p __HOST_PORT__:__CONTAINER_PORT__ --restart always __FULL_IMAGE_URI__
          echo "Pruning old docker images..."
          sudo docker image prune -af
          EOF
          )
          
          # 플레이스홀더를 실제 값으로 치환
          FULL_IMAGE_URI="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__AWS_REGION__/${AWS_REGION}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__ECR_REGISTRY__/${ECR_REGISTRY}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__FULL_IMAGE_URI__/${FULL_IMAGE_URI}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__CONTAINER_NAME__/${CONTAINER_NAME}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__HOST_PORT__/${HOST_PORT}}"
          COMMAND_SCRIPT="${COMMAND_SCRIPT//__CONTAINER_PORT__/${CONTAINER_PORT}}"
          
          # jq를 사용하여 SSM 파라미터용 JSON을 안전하게 생성
          SSM_PARAMETERS=$(jq -n --arg script "$COMMAND_SCRIPT" '{ "commands": ($script | split("\n")) }')

          echo "Sending deployment command to EC2 instance via SSM..."
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying ${FULL_IMAGE_URI}" \
            --parameters "$SSM_PARAMETERS"